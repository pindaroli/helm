# Oli-Arr Values Configuration
# Configurazione per stack Servarr completo con volume media condiviso
# Uso: helm install oli-arr charts/servarr -f oli-arr-values.yaml

## Jellyfin - Media Server (master del volume media)
jellyfin:
  enabled: true
  replicaCount: 1
  
  image:
    repository: lscr.io/linuxserver/jellyfin
    tag: "10.10.1"
    pullPolicy: IfNotPresent
  
  # Configurazione del servizio
  service:
    type: ClusterIP
    port: 8096
  
  # Ingress per accesso esterno
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: jellyfin.local
        paths:
          - path: /
            pathType: Prefix
    # tls:
    #   - secretName: jellyfin-tls
    #     hosts:
    #       - jellyfin.local
  
  # Gestione volumi - Jellyfin Ã¨ il master del volume media
  persistence:
    config:
      enabled: true
      storageClass: ""
      size: 2Gi
      accessMode: ReadWriteOnce
    media:
      enabled: true
      storageClass: ""
      size: 500Gi
      accessMode: ReadWriteMany  # Importante per condivisione multi-node
  
  # Risorse
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 2000m
      memory: 4Gi

## Sonarr - TV Shows Manager
sonarr:
  enabled: true
  replicaCount: 1
  
  image:
    repository: lscr.io/linuxserver/sonarr
    tag: "4.0.10"
    pullPolicy: IfNotPresent
  
  # Servizio
  service:
    type: ClusterIP
    port: 80
  
  # Ingress
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: sonarr.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  
  # Variabili ambiente LinuxServer
  env:
    PUID: "1000"
    PGID: "1000"
    TZ: "Europe/Rome"
    UMASK: "002"
  
  # Persistence - usa il volume media di Jellyfin
  persistence:
    enabled: true
    path: tv
    storageClass: ""
    size: 1Gi
    accessMode: ReadWriteOnce
  
  resources:
    requests:
      cpu: 50m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1Gi

## Radarr - Movies Manager
radarr:
  enabled: true
  replicaCount: 1
  
  image:
    repository: lscr.io/linuxserver/radarr
    tag: "5.14.0"
    pullPolicy: IfNotPresent
  
  # Servizio
  service:
    type: ClusterIP
    port: 7878
  
  # Ingress
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: radarr.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  
  # Variabili ambiente
  env:
    PUID: "1000"
    PGID: "1000"
    TZ: "Europe/Rome"
    UMASK: "002"
  
  # Persistence - usa il volume media di Jellyfin
  persistence:
    enabled: true
    path: movies
    storageClass: ""
    size: 1Gi
    accessMode: ReadWriteOnce
  
  resources:
    requests:
      cpu: 50m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1Gi

## Lidarr - Music Manager
lidarr:
  enabled: true
  replicaCount: 1
  
  image:
    repository: lscr.io/linuxserver/lidarr
    tag: "2.7.1"
    pullPolicy: IfNotPresent
  
  # Servizio
  service:
    type: ClusterIP
    port: 8686
  
  # Ingress
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: lidarr.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  
  # Variabili ambiente
  env:
    PUID: "1000"
    PGID: "1000"
    TZ: "Europe/Rome"
    UMASK: "002"
  
  # Persistence - usa il volume media di Jellyfin
  persistence:
    enabled: true
    path: music
    storageClass: ""
    size: 1Gi
    accessMode: ReadWriteOnce
  
  resources:
    requests:
      cpu: 50m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1Gi

## Readarr - Books Manager
readarr:
  enabled: true
  replicaCount: 1
  
  image:
    repository: lscr.io/linuxserver/readarr
    tag: "0.4.2-develop"
    pullPolicy: IfNotPresent
  
  # Servizio
  service:
    type: ClusterIP
    port: 8787
  
  # Ingress
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: readarr.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  
  # Variabili ambiente
  env:
    PUID: "1000"
    PGID: "1000"
    TZ: "Europe/Rome"
    UMASK: "002"
  
  # Persistence - usa il volume media di Jellyfin
  persistence:
    enabled: true
    path: books
    storageClass: ""
    size: 1Gi
    accessMode: ReadWriteOnce
  
  resources:
    requests:
      cpu: 50m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1Gi

## Bazarr - Subtitles Manager
bazarr:
  enabled: true
  replicaCount: 1
  
  image:
    repository: lscr.io/linuxserver/bazarr
    tag: "1.4.5"
    pullPolicy: IfNotPresent
  
  # Servizio
  service:
    type: ClusterIP
    port: 6767
  
  # Ingress
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: bazarr.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  
  # Variabili ambiente
  env:
    PUID: "1000"
    PGID: "1000"
    TZ: "Europe/Rome"
  
  # Persistence
  persistence:
    enabled: true
    storageClass: ""
    size: 1Gi
    accessMode: ReadWriteOnce
  
  resources:
    requests:
      cpu: 25m
      memory: 128Mi
    limits:
      cpu: 250m
      memory: 512Mi

## qBittorrent - Download Client
qbittorrent:
  enabled: true
  replicaCount: 1
  
  image:
    repository: lscr.io/linuxserver/qbittorrent
    tag: "4.6.7"
    pullPolicy: IfNotPresent
  
  # Servizi (web UI e BitTorrent)
  service:
    web:
      type: ClusterIP
      port: 8080
    bt:
      type: ClusterIP
      port: 6881
  
  # Ingress
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: qbittorrent.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  
  # Variabili ambiente
  env:
    PUID: "1000"
    PGID: "1000"
    TZ: "Europe/Rome"
  
  # Persistence - usa il volume media di Jellyfin per downloads
  persistence:
    enabled: true
    path: downloads
    storageClass: ""
    size: 1Gi
    accessMode: ReadWriteOnce
  
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 2Gi

## Prowlarr - Indexer Manager
prowlarr:
  enabled: true
  replicaCount: 1
  
  image:
    repository: lscr.io/linuxserver/prowlarr
    tag: "1.25.4"
    pullPolicy: IfNotPresent
  
  # Servizio
  service:
    type: ClusterIP
    port: 9696
  
  # Ingress
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: prowlarr.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  
  # Variabili ambiente
  env:
    PUID: "1000"
    PGID: "1000"
    TZ: "Europe/Rome"
    UMASK: "002"
  
  # Persistence
  persistence:
    enabled: true
    storageClass: ""
    size: 1Gi
    accessMode: ReadWriteOnce
  
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

## Jellyseerr - Request Management
jellyseerr:
  enabled: true
  replicaCount: 1
  
  image:
    repository: docker.io/fallenbagel/jellyseerr
    tag: "2.0.1"
    pullPolicy: IfNotPresent
  
  # Servizio
  service:
    type: ClusterIP
    port: 5055
  
  # Ingress
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - host: jellyseerr.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  
  # Persistence
  persistence:
    enabled: true
    storageClass: ""
    size: 1Gi
    accessMode: ReadWriteOnce
  
  resources:
    requests:
      cpu: 50m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 1Gi

## FlareSolverr - CloudFlare Solver
flaresolverr:
  enabled: true
  replicaCount: 1
  
  image:
    repository: ghcr.io/flaresolverr/flaresolverr
    tag: "v3.3.21"
    pullPolicy: IfNotPresent
  
  # Servizio
  service:
    type: ClusterIP
    port: 8191
  
  # Security Context ottimizzato
  podSecurityContext:
    fsGroup: 1000
    fsGroupChangePolicy: OnRootMismatch
  
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    privileged: false
    runAsUser: 1000
    runAsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
  
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi

## Cleanuperr - Cleanup Automation (opzionale)
cleanuperr:
  enabled: false
  # Decommentare e configurare se necessario
  # env:
  #   QBITTORRENT__URL: "http://oli-arr-qbittorrent-web:8080"
  #   SONARR__INSTANCES__0__URL: "http://oli-arr-sonarr:80"
  #   RADARR__INSTANCES__0__URL: "http://oli-arr-radarr:7878"
  #   LIDARR__INSTANCES__0__URL: "http://oli-arr-lidarr:8686"